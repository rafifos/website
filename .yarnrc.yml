# See https://yarnpkg.com/configuration/yarnrc for more info on configuring
# yarn v2+.

# The path of a Yarn binary, which will be executed instead of any other
# (including the global one) for any command run within the directory covered by
# the rc file. If the file extension ends with .js it will be required, and will
# be spawned in any other case.
#
# The yarnPath setting is currently the preferred way to install Yarn within a
# project, as it ensures that your whole team will use the exact same Yarn
# version, without having to individually keep it up-to-date.
yarnPath: .yarn/releases/yarn-3.2.0.cjs

# Ever since Yarn was created, our very essence has been about experimenting,
# evolving, pushing the status quo - rinse and repeat, each time one step
# further, each time paving the way for our next move.
#
# As you can guess, this philosophy (coupled with the high number of external
# contributions we receive) requires us to iterate fast in order to accommodate
# the various experiments that we brew. In a major step forward, Yarn got
# redesigned in the v2 in order to leverage a new modular API that can be
# extended through plugins. Nowadays, most of our features are implemented
# through those plugins - even yarn add and yarn install are preinstalled
# plugins!
#
# See: https://yarnpkg.com/features/plugins
plugins:
  - path: .yarn/plugins/@yarnpkg/plugin-typescript.cjs
    spec: "@yarnpkg/plugin-typescript"
  - path: .yarn/plugins/@yarnpkg/plugin-interactive-tools.cjs
    spec: "@yarnpkg/plugin-interactive-tools"
  - path: .yarn/plugins/mhassan1/plugin-licenses.cjs
    spec: "https://raw.githubusercontent.com/mhassan1/yarn-plugin-licenses/v0.8.1/bundles/@yarnpkg/plugin-licenses.js"
  - path: .yarn/plugins/devoto13/plugin-engines.cjs
    spec: "https://raw.githubusercontent.com/devoto13/yarn-plugin-engines/main/bundles/%40yarnpkg/plugin-engines.js"

# If true, Yarn will ask for your guidance when some actions would be improved
# by being disambiguated. Enabling this setting also unlocks some features (for
# example the `yarn add` command will suggest to reuse the same dependencies as
# other workspaces if pertinent).
preferInteractive: true

# If true, the CLI will prefix most messages with codes suitable for search
# engines.
enableMessageNames: ${CI:-false}

# If true (the default outside of CI environments), Yarn will periodically send
# anonymous data to our servers tracking some usage information such as the
# number of dependency in your project, how many install you ran, etc.
enableTelemetry: false

# Some packages may have been specified incorrectly with regard to their
# dependencies - for example with one dependency being missing, causing Yarn to
# refuse it the access. The packageExtensions fields offer a way to extend the
# existing package definitions with additional information.
packageExtensions:
